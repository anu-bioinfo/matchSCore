getwd()
source("https://bioconductor.org/biocLite.R")
biocLite("scde")
library(scde)
biocLite(scde)
biocLite('scde')
mad
library(scater)
isOutlier
library(genefilter)
library(statmod)
require(ggplot2)
library(gplots)
require(DESeq2)
library(scLVM)
install.packages("rPython")
library(scLVM)
library(genefilter)
library(statmod)
require(ggplot2)
library(gplots)
require(DESeq2)
library(scLVM)
library(genefilter)
library(statmod)
require(ggplot2)
library(gplots)
library(scLVM)
source("http://bioconductor.org/biocLite.R")
biocLite("slam")
install.packages("~/Downloads/slam_0.1-40.tar", repos = NULL)
install.packages("~/Downloads/slam_0.1-40.tar")
library(CountClust)
library(devtools)
install_github('kkdey/CountClust')
install_github('kkdey/singleCellRNASeqMouseDeng2014')
library(CountClust)
lirary(ggplot2)
library(ggplot2)
library(CountClust)
knitr::opts_chunk$set(echo = TRUE)
text <- element_text(color = "black", size = 16)
text.lab <- element_text(color = "black", size = 12)
text.lab2 <- element_text(color = "black", size = 10)
text.lab3 <- element_text(color = "black", size = 9)
source(file="../../Rscript/my_plotMetadata.R")
source(file="../../Rscript/my_plotPhenoData.R")
source(file="../../Rscript/my_plotFeatureData.R")
source(file="../../Rscript/plotPCA.R")
source(file="../../Rscript/my_plotReducedDim.default.R")
source(file="../../Rscript/myTSNE_function.R")
source(file="../../Rscript/sceset_create.R")
source(file="../../Rscript/go.env_create.R")
source(file="../../Rscript/my_plotDiffusionMap.R")
setwd("/Users/emereu/Dropbox (Personal)/GRAF10.2/Transdifferentiation_all_tp/")
library(scde)
library(scde)
load(file="cd.RData")
load(file="pools.RData")
batch=pools
load(file="CCout_pagoda/knn.RData")
load(file="CCout_pagoda/varinfo.RData")
mat.c=varinfo$mat #adjusted expression matrix
hvg=names(sort(varinfo$arv, decreasing = TRUE)[1:100])
library(scater)
text <- element_text(color = "black", size = 16)
text.lab <- element_text(color = "black", size = 12)
text.lab2 <- element_text(color = "black", size = 10)
text <- element_text(color = "black", size = 16)
text.lab <- element_text(color = "black", size = 12)
text.lab2 <- element_text(color = "black", size = 10)
text.lab3 <- element_text(color = "black", size = 9)
source(file="../../Rscript/my_plotMetadata.R")
source(file="../../Rscript/my_plotPhenoData.R")
source(file="../../Rscript/my_plotFeatureData.R")
source(file="../../Rscript/plotPCA.R")
source(file="../../Rscript/plotPCA.R")
source(file="../../Rscript/my_plotReducedDim.default.R")
source(file="../../Rscript/my_plotFeatureData.R")
source(file="../../Rscript/plotPCA.R")
source(file="../../Rscript/my_plotReducedDim.default.R")
source(file="../../Rscript/myTSNE_function.R")
source(file="../../Rscript/sceset_create.R")
source(file="../../Rscript/go.env_create.R")
source(file="../../Rscript/my_plotDiffusionMap.R")
load(file="sg.RData")
colours=c("darkslategray1","deepskyblue","dodgerblue","darkolivegreen3", "darkolivegreen4","darkgreen")
colours=c("darkslategray1","deepskyblue","dodgerblue","darkolivegreen3", "darkolivegreen4","darkgreen")
load(file="out_CountClust/go.envOK.RData")
load(file="CCout_pagoda2/pwpca_cc_tp.env10.RData")
df <- pagoda.top.aspects(pwpca,return.table = T, plot = TRUE,return.genes=F)
df_genes <- pagoda.top.aspects(pwpca,return.table = F, plot = TRUE,return.genes=T)
df2=pagoda.top.aspects(pwpca,return.table =F, plot = F,return.genes=F)
driving_genes=names(df2$gw)
driving_genes=names(df2$gw)
tam <- pagoda.top.aspects(pwpca)
tamr <- pagoda.reduce.loading.redundancy(tam,pwpca)
hc <- pagoda.cluster.cells(tam,varinfo,verbose=1,include.aspects = T)
hc_info=pagoda.cluster.cells(tam,varinfo,verbose=1,include.aspects = T,return.details=T)
clus_distance=hc_info$distance
tamr2 <- pagoda.reduce.redundancy(tamr, distance.threshold = 0.9,plot = T,cell.clustering = hc,labRow = NA, labCol = NA, box = TRUE, margins = c(0.5, 0.5))
col.cols <- rbind(groups = cutree(hc, 4))
l2cols <- c("black","red","dodgerblue","hotpink","orange","green4","violet","darkturquoise")[as.factor(col.cols)]
l2cols2 <- c( "darkslategray1","deepskyblue","dodgerblue","darkolivegreen3","darkolivegreen4","darkgreen")[sg[colnames(col.cols)]]
hvg=names(sort(varinfo$arv, decreasing = TRUE)[1:100])
library(scater)
text <- element_text(color = "black", size = 16)
text.lab <- element_text(color = "black", size = 12)
text.lab2 <- element_text(color = "black", size = 10)
text.lab3 <- element_text(color = "black", size = 9)
source(file="../../Rscript/my_plotMetadata.R")
source(file="../../Rscript/my_plotPhenoData.R")
source(file="../../Rscript/my_plotFeatureData.R")
source(file="../../Rscript/plotPCA.R")
source(file="../../Rscript/my_plotReducedDim.default.R")
source(file="../../Rscript/myTSNE_function.R")
source(file="../../Rscript/sceset_create.R")
source(file="../../Rscript/go.env_create.R")
source(file="../../Rscript/my_plotDiffusionMap.R")
load(file="sg.RData")
colours=c("darkslategray1","deepskyblue","dodgerblue","darkolivegreen3", "darkolivegreen4","darkgreen")
load(file="out_CountClust/go.envOK.RData")
load(file="CCout_pagoda2/pwpca_cc_tp.env10.RData")
df <- pagoda.top.aspects(pwpca,return.table = T, plot = TRUE,return.genes=F)
df_genes <- pagoda.top.aspects(pwpca,return.table = F, plot = TRUE,return.genes=T)
df2=pagoda.top.aspects(pwpca,return.table =F, plot = F,return.genes=F)
driving_genes=names(df2$gw)
tam <- pagoda.top.aspects(pwpca)
tamr <- pagoda.reduce.loading.redundancy(tam,pwpca)
hc <- pagoda.cluster.cells(tam,varinfo,verbose=1,include.aspects = T)
hc_info=pagoda.cluster.cells(tam,varinfo,verbose=1,include.aspects = T,return.details=T)
clus_distance=hc_info$distance
tamr2 <- pagoda.reduce.redundancy(tamr, distance.threshold = 0.9,plot = T,cell.clustering = hc,labRow = NA, labCol = NA, box = TRUE, margins = c(0.5, 0.5))
col.cols <- rbind(groups = cutree(hc, 4))
l2cols <- c("black","red","dodgerblue","hotpink","orange","green4","violet","darkturquoise")[as.factor(col.cols)]
l2cols2 <- c( "darkslategray1","deepskyblue","dodgerblue","darkolivegreen3","darkolivegreen4","darkgreen")[sg[colnames(col.cols)]]
dg=grep("^Hist|^Pcd|^Gm|Rp|Actb",driving_genes,invert = T)
dg_info=pagoda.show.pathways(driving_genes[dg], varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=150,colcols = rbind(l2cols2),cexRow = 0.7)
load(file="dg_heat.RData")
ro_dg=dg_info$row.order
mat=dg_heat[ro_dg,]
source(file="../../Rscript/extract_hc.R")
source(file="../../Rscript/extract_hc.R")
hc1=extract_hc(heat_info = dg_info)
hc1=extract_hc(heat_info = dg_info)
load(file="CCout_pagoda2/HC1_DG.RData")
hc1=extract_hc(heat_info = dg_info)
load(file="CCout_pagoda2/HC1_DG.RData")
vd <- as.dist(1-cor(as.matrix(dg_heat))) ### Distance
source(file="../../Rscript/go.env_create.R")
source(file="../../Rscript/my_plotDiffusionMap.R")
load(file="sg.RData")
colours=c("darkslategray1","deepskyblue","dodgerblue","darkolivegreen3", "darkolivegreen4","darkgreen")
load(file="out_CountClust/go.envOK.RData")
load(file="CCout_pagoda2/pwpca_cc_tp.env10.RData")
df <- pagoda.top.aspects(pwpca,return.table = T, plot = TRUE,return.genes=F)
df_genes <- pagoda.top.aspects(pwpca,return.table = F, plot = TRUE,return.genes=T)
df2=pagoda.top.aspects(pwpca,return.table =F, plot = F,return.genes=F)
driving_genes=names(df2$gw)
tam <- pagoda.top.aspects(pwpca)
tamr <- pagoda.reduce.loading.redundancy(tam,pwpca)
hc <- pagoda.cluster.cells(tam,varinfo,verbose=1,include.aspects = T)
hc_info=pagoda.cluster.cells(tam,varinfo,verbose=1,include.aspects = T,return.details=T)
clus_distance=hc_info$distance
tamr2 <- pagoda.reduce.redundancy(tamr, distance.threshold = 0.9,plot = T,cell.clustering = hc,labRow = NA, labCol = NA, box = TRUE, margins = c(0.5, 0.5))
col.cols <- rbind(groups = cutree(hc, 4))
l2cols <- c("black","red","dodgerblue","hotpink","orange","green4","violet","darkturquoise")[as.factor(col.cols)]
l2cols2 <- c( "darkslategray1","deepskyblue","dodgerblue","darkolivegreen3","darkolivegreen4","darkgreen")[sg[colnames(col.cols)]]
dg=grep("^Hist|^Pcd|^Gm|Rp|Actb",driving_genes,invert = T)
dg_info=pagoda.show.pathways(driving_genes[dg], varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=150,colcols = rbind(l2cols2),cexRow = 0.7)
load(file="dg_heat.RData")
ro_dg=dg_info$row.order
mat=dg_heat[ro_dg,]
source(file="../../Rscript/extract_hc.R")
hc1=extract_hc(heat_info = dg_info)
load(file="CCout_pagoda2/HC1_DG.RData")
vd <- as.dist(1-cor(as.matrix(dg_heat))) ### Distance
mycl <- cutree(hc1, k=5)
col.cols <- rbind(groups = cutree(hc1, 5))
l2cols <- c("black","red","darkturquoise","hotpink","orange","green4","violet")[as.factor(col.cols)]
l2cols2 <- c( "darkslategray1","deepskyblue","dodgerblue","darkolivegreen3","darkolivegreen4","darkgreen")[sg[colnames(col.cols)]]
dg_info=pagoda.show.pathways(driving_genes[dg], varinfo, go.env, cell.clustering = hc1, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=120,colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
load(file="g.cl1.dg.RData")
pagoda.show.pathways(g.cl1, varinfo, go.env, cell.clustering = hc1, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=35,colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
pagoda.show.pathways(g.cl1, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=35,colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
load(file="g.cl2.dg.RData")
pagoda.show.pathways(g.cl2, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=35,colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
load(file="g.cl1.hvg.RData")
pagoda.show.pathways(g.cl1, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=35,colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
load(file="g.cl2.hvg.RData")
pagoda.show.pathways(g.cl1, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=35,colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
pagoda.show.pathways(g.cl2, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=35,colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
info=pagoda.show.pathways(g.cl2, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=35,colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
x=info$vmap[info$row.order,]
x=rownames(info$vmap[info$row.order,])
x
info=pagoda.show.pathways(g.cl2, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=35,colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
x=rownames(info$vmap[info$row.order,])
x=x[11:32]
x
pagoda.show.pathways(g.cl2, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=35,colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
pagoda.show.pathways(g.cl2, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=length(x),colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
length(x)
info=pagoda.show.pathways(g.cl2, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=length(x),colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
x=rownames(info$vmap[info$row.order,])
x
info=pagoda.show.pathways(g.cl2, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=length(x),colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
x=x[8:length(x)]
length(x)
pagoda.show.pathways(g.cl2, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=length(x),colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
pagoda.show.pathways(x, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=length(x),colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
info=pagoda.show.pathways(g.cl2, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=35,colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
x=rownames(info$vmap[info$row.order,])
x=x[11:length(x)]
length(x)
pagoda.show.pathways(x, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=length(x),colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
which(x=="Gm13270")
x=x[-p]
p=which(x=="Gm13270")
x=x[-p]
pagoda.show.pathways(x, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=length(x),colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
p=grep("^Gm|Hist|Cd74")
p=grep("^Gm|Hist|Cd74",x)
x=x[-p]
pagoda.show.pathways(x, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=length(x),colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
info=pagoda.show.pathways(g.cl2, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=35,colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
x=rownames(info$vmap[info$row.order,])
x
info=pagoda.show.pathways(g.cl2, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=35,colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
x=x[11:18]
length(x)
pagoda.show.pathways(x, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=length(x),colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
source(file="/Users/emereu/Dropbox (Personal)/Rscript/trace_signature2.r")
trace_signature2(x,paste("signatureDay4",i,sep=""),dir_out = "CCplots2/")
trace_signature2(x,"signatureDay4",dir_out = "CCplots2/")
png(file="CCplots2/Heatmap_signatureDay4.png",width = 6, height = 6, units = 'in', res = 300)
pagoda.show.pathways(x, varinfo, go.env, cell.clustering = NULL, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=length(x),colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
dev.off()
png(file="CCplots2/Heatmap_signatureDay4.png",width = 6, height = 6, units = 'in', res = 300)
pagoda.show.pathways(x, varinfo, go.env, cell.clustering = hc1, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=length(x),colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
pagoda.show.pathways(x, varinfo, go.env, cell.clustering = hc1, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=length(x),colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
dev.off()
setwd("/Users/emereu/Dropbox (Personal)/GRAF10.2/Transdifferentiation_all_tp/")
png(file="CCplots2/Heatmap_signatureDay4.png",width = 6, height = 6, units = 'in', res = 300)
pagoda.show.pathways(x, varinfo, go.env, cell.clustering = hc1, margins = c(1,5), show.cell.dendrogram = TRUE, showRowLabels = TRUE, showPC = TRUE,return.details=T,n.genes=length(x),colcols = rbind(l2cols2,l2cols),cexRow = 0.7)
dev.off()
library(Seurat)
library(Seurat)
library(dplyr)
library(Matrix)
load(file="cd.RData")
cd=as(as.matrix(cd),"sparseMatrix")
head(cd[,1:4])
seu_cd <- new("seurat", raw.data = cd)
df=data.frame(cell=colnames(cd),sg=sg[colnames(cd)],pool=pools[colnames(cd)])
rownames(df)=df$cell
df=df[,2:3]
seu_cd <- Setup(seu_cd, min.cells = 3, min.genes = 0, do.logNormalize = F, total.expr = 0, is.expr = 1, meta.data = df,project = "Graf")
df=data.frame(cell=colnames(cd),sg=sg[colnames(cd)],pool=pools[colnames(cd)])
library(Seurat)
library(dplyr)
library(Matrix)
load(file="cd.RData")
load(file="pools.RData")
load(file="sg.RData")
cd=as(as.matrix(cd),"sparseMatrix")
seu_cd <- new("seurat", raw.data = cd)
df=data.frame(cell=colnames(cd),sg=sg[colnames(cd)],pool=pools[colnames(cd)])
rownames(df)=df$cell
df=df[,2:3]
seu_cd <- Setup(seu_cd, min.cells = 3, min.genes = 0, do.logNormalize = F, total.expr = 0, is.expr = 1, meta.data = df,project = "Graf")
dim(seu_cd@data)
seu_cd <- RegressOut(seu_cd, latent.vars = c("nUMI", "pool"),model.use="negbinom",do.scale=F,do.center=F)
save(seu_cd,file="seu_Normalized_object.RData")
load(file="../GRAF10.2/Transdifferentiation_all_tp/CCout_pagoda/hvg.RData")
library(scater)
source(file="/Users/emereu/Dropbox (Personal)/Rscript/my_plotMetadata.R")
source(file="/Users/emereu/Dropbox (Personal)/Rscript/my_plotPhenoData.R")
source(file="/Users/emereu/Dropbox (Personal)/Rscript/my_plotFeatureData.R")
source(file="/Users/emereu/Dropbox (Personal)/Rscript/plotPCA.R")
source(file="/Users/emereu/Dropbox (Personal)/Rscript/my_plotReducedDim.default.R")
source(file="/Users/emereu/Dropbox (Personal)/Rscript/myTSNE_function.R")
source(file="/Users/emereu/Dropbox (Personal)/Rscript/sceset_create.R")
source(file="/Users/emereu/Dropbox (Personal)/Rscript/my_plotDiffusionMap.R")
dim(seu_cd@scale.data)
seu_cd <- MeanVarPlot(seu_cd ,fxn.x = expMean, fxn.y = logVarDivMean, do.contour = F,do.text = T, x.low.cutoff = 0, x.high.cutoff = 40, y.cutoff = 5)
library(Seurat)
library(dplyr)
load(file="cd.RData")
load(file="pools.RData")
load(file="sg.RData")
cd=as(as.matrix(cd),"sparseMatrix")
head(cd[,1:4])
seu_cd <- new("seurat", raw.data = cd)
df=data.frame(cell=colnames(cd),sg=sg[colnames(cd)],pool=pools[colnames(cd)])
rownames(df)=df$cell
df=df[,2:3]
seu_cd <- Setup(seu_cd, min.cells = 3, min.genes = 0, do.logNormalize = F, total.expr = 0, is.expr = 1, meta.data = df,project = "Graf")
dim(seu_cd@data)
seu_cd <- RegressOut(seu_cd, latent.vars = c("nUMI", "pool"),model.use="negbinom",do.scale=F,do.center=F)
save(seu_cd,file="seu_Normalized_object.RData")
load(file="../GRAF10.2/Transdifferentiation_all_tp/CCout_pagoda/hvg.RData")
library(scater)
source(file="/Users/emereu/Dropbox (Personal)/Rscript/my_plotMetadata.R")
source(file="/Users/emereu/Dropbox (Personal)/Rscript/my_plotPhenoData.R")
source(file="/Users/emereu/Dropbox (Personal)/Rscript/my_plotFeatureData.R")
source(file="/Users/emereu/Dropbox (Personal)/Rscript/plotPCA.R")
source(file="/Users/emereu/Dropbox (Personal)/Rscript/my_plotReducedDim.default.R")
source(file="/Users/emereu/Dropbox (Personal)/Rscript/myTSNE_function.R")
source(file="/Users/emereu/Dropbox (Personal)/Rscript/sceset_create.R")
source(file="/Users/emereu/Dropbox (Personal)/Rscript/my_plotDiffusionMap.R")
dim(seu_cd@scale.data)
seu_cd <- MeanVarPlot(seu_cd ,fxn.x = expMean, fxn.y = logVarDivMean, do.contour = F,do.text = T, x.low.cutoff = 0, x.high.cutoff = 40, y.cutoff = 5)
seu_cd <- MeanVarPlot(seu_cd ,fxn.x = expMean, fxn.y = logVarDivMean, do.contour = F,do.text = F, x.low.cutoff = 0, x.high.cutoff = 40, y.cutoff = 5)
dim(seu_cd@scale.data)
seu_cd@var.genes
head(rownames(seu_cd@scale.data))
head(rownames(seu_cd@raw.data))
head(rownames(seu_cd@data))
?MeanVarPlot
seu_cd <- MeanVarPlot(seu_cd ,fxn.x = expMean, fxn.y = logVarDivMean, do.contour = F,do.text = F, x.low.cutoff = 0.1, x.high.cutoff = 10, y.cutoff = 1.5,y.high.cutoff=10)
seu_cd@var.genes
seu_cd <- MeanVarPlot(seu_cd ,fxn.x = expMean, fxn.y = logVarDivMean, do.contour = F,do.text = T, x.low.cutoff = 0.1, x.high.cutoff = 10, y.cutoff = 1.5,y.high.cutoff=10)
seu_cd <- MeanVarPlot(seu_cd ,fxn.x = expMean, fxn.y = logVarDivMean, do.contour = F,do.text = T)
seu_cd <- MeanVarPlot(seu_cd ,fxn.x = expMean, fxn.y = logVarDivMean, do.contour = F,do.text = T, x.low.cutoff = 0.1, x.high.cutoff = 10, y.cutoff = 1.5,y.high.cutoff=10)
library(Seurat)
library(dplyr)
load(file="cd.RData")
load(file="pools.RData")
load(file="sg.RData")
head(cd[,1:4])
head(cd[,1:4])
df=data.frame(cell=colnames(cd),sg=sg[colnames(cd)],pool=pools[colnames(cd)])
rownames(df)=df$cell
df=df[,2:3]
seu_cd <- Setup(seu_cd, min.cells = 3, min.genes = 0, do.logNormalize = F, total.expr = 0, is.expr = 1, meta.data = df,project = "Graf")
seu_cd <- new("seurat", raw.data = cd)
df=data.frame(cell=colnames(cd),sg=sg[colnames(cd)],pool=pools[colnames(cd)])
rownames(df)=df$cell
df=df[,2:3]
seu_cd <- Setup(seu_cd, min.cells = 3, min.genes = 0, do.logNormalize = F, total.expr = 0, is.expr = 1, meta.data = df,project = "Graf")
dim(seu_cd@data)
seu_cd <- RegressOut(seu_cd, latent.vars = c("nUMI", "pool"),model.use="negbinom",do.scale=F,do.center=F)
save(seu_cd,file="seu_Normalized_object.RData")
load(file="../GRAF10.2/Transdifferentiation_all_tp/CCout_pagoda/hvg.RData")
load(file="../GRAF10.2/Transdifferentiation_all_tp/CCout_pagoda/hvg.RData")
#install_version("flexmix", version = "2.3-13", repos = "http://cran.us.r-project.org”)
sessionInfo()
#install_version("RcppArmadillo", version = "0.4.650.1.1", repos = "http://cran.us.r-project.org”)
install_version("RcppArmadillo", version = "0.4.650.1.1", repos = "http://cran.us.r-project.org”)
)
require(devtools)
session_info()
sessionInfo()
library(scde)
sessionInfo()
install.packages("RcppArmadillo")
library(scde)
sessionInfo()
install.packages("Rcpp")
library(scde)
sessionInfo()
pagoda.varnorm
library(scde)
sessionInfo()
install.packages("~/Downloads/scde_2.4.1.tar.gz", repos = NULL, type = "source")
library(scde)
sessionInfo()
require(devtools)
install_version("flexmix", version = "2.3-13", repos = "http://cran.us.r-project.org”)
library(powsimR)
load(file="sim.RData")
sim10x=sim
install_github('elimereu/matchSCore')
install.packages("devtools")
library("devtools")
install_github('elimereu/matchSCore')
library(matchSCore)
library(Seurat)
install_github('elimereu/matchSCore')
library(matchSCore)
install_github('elimereu/matchSCore')
library("devtools")
install_github('elimereu/matchSCore')
library(matchSCore)
?matchSCore
library("devtools")
install_github('elimereu/matchSCore')
library(matchSCore)
?matchSCore
?matchSCore
install_github('elimereu/matchSCore')
library(matchSCore)
?matchSCore
library("devtools")
install_github('elimereu/matchSCore')
library(matchSCore)
?matchSCore
library("devtools")
install_github('elimereu/matchSCore')
library(matchSCore)
?matchSCore
?remove.packages
remove.packages("matchSCore")
install_github('elimereu/matchSCore')
library(matchSCore)
library("devtools")
install_github('elimereu/matchSCore')
library(matchSCore)
?matchSCore
library(matchSCore)
remove.packages("matchSCore")
library(matchSCore)
?remove.packages
library(matchSCore)
library("devtools")
install_github('elimereu/matchSCore')
library(matchSCore)
?matchSCore
remove.packages("matchSCore",lib = "/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(matchSCore)
?matchSCore
?matchSCore
library(matchSCore)
library(matchSCore)
library("devtools")
install_github('elimereu/matchSCore')
library(matchSCore)
?matchSCore
document()
library(roxygen2)
document()
library("devtools")
document()
setwd("~/Dropbox (Personal)/")
setwd("matchSCore_pkg")
setwd("SCG/")
document()
install_github('elimereu/matchSCore')
library(matchSCore)
?matchSCore
library("devtools")
install_github('elimereu/matchSCore')
library(matchSCore)
?matchSCore
